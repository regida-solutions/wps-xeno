/* eslint-disable */
!(function (e) {
	'function' == typeof define && define.amd
		? define(['jquery'], e)
		: 'object' == typeof module && module.exports
		? (module.exports = e(require('jquery')))
		: e(jQuery);
})(function (e) {
	var t = Array.prototype.slice,
		n = Array.prototype.splice,
		i = {
			topSpacing: 0,
			bottomSpacing: 0,
			className: 'is-sticky',
			wrapperClassName: 'sticky-wrapper',
			center: !1,
			getWidthFrom: '',
			widthFromWrapper: !0,
			responsiveWidth: !1,
		},
		r = e(window),
		o = e(document),
		s = [],
		a = r.height(),
		c = function () {
			for (
				var t = r.scrollTop(),
					n = o.height(),
					i = n - a,
					c = t > i ? i - t : 0,
					p = 0,
					d = s.length;
				d > p;
				p++
			) {
				var u = s[p],
					l = u.stickyWrapper.offset().top,
					w = l - u.topSpacing - c;
				if (
					(u.stickyWrapper.css(
						'height',
						u.stickyElement.outerHeight(),
					),
					w >= t)
				)
					null !== u.currentTop &&
						(u.stickyElement.css({
							width: '',
							position: '',
							top: '',
						}),
						u.stickyElement.parent().removeClass(u.className),
						u.stickyElement.trigger('sticky-end', [u]),
						(u.currentTop = null));
				else {
					var g =
						n -
						u.stickyElement.outerHeight() -
						u.topSpacing -
						u.bottomSpacing -
						t -
						c;
					if (
						(0 > g ? (g += u.topSpacing) : (g = u.topSpacing),
						u.currentTop !== g)
					) {
						var h;
						u.getWidthFrom
							? (h = e(u.getWidthFrom).width() || null)
							: u.widthFromWrapper &&
							  (h = u.stickyWrapper.width()),
							null == h && (h = u.stickyElement.width()),
							u.stickyElement
								.css('width', h)
								.css('position', 'fixed')
								.css('top', g),
							u.stickyElement.parent().addClass(u.className),
							null === u.currentTop
								? u.stickyElement.trigger('sticky-start', [u])
								: u.stickyElement.trigger('sticky-update', [u]),
							(u.currentTop === u.topSpacing &&
								u.currentTop > g) ||
							(null === u.currentTop && g < u.topSpacing)
								? u.stickyElement.trigger(
										'sticky-bottom-reached',
										[u],
								  )
								: null !== u.currentTop &&
								  g === u.topSpacing &&
								  u.currentTop < g &&
								  u.stickyElement.trigger(
										'sticky-bottom-unreached',
										[u],
								  ),
							(u.currentTop = g);
					}
					var m = u.stickyWrapper.parent(),
						y =
							u.stickyElement.offset().top +
								u.stickyElement.outerHeight() >=
								m.offset().top + m.outerHeight() &&
							u.stickyElement.offset().top <= u.topSpacing;
					y
						? u.stickyElement
								.css('position', 'absolute')
								.css('top', '')
								.css('bottom', 0)
						: u.stickyElement
								.css('position', 'fixed')
								.css('top', g)
								.css('bottom', '');
				}
			}
		},
		p = function () {
			a = r.height();
			for (var t = 0, n = s.length; n > t; t++) {
				var i = s[t],
					o = null;
				i.getWidthFrom
					? i.responsiveWidth && (o = e(i.getWidthFrom).width())
					: i.widthFromWrapper && (o = i.stickyWrapper.width()),
					null != o && i.stickyElement.css('width', o);
			}
		},
		d = {
			init: function (t) {
				var n = e.extend({}, i, t);
				return this.each(function () {
					var t = e(this),
						r = t.attr('id'),
						o = r
							? r + '-' + i.wrapperClassName
							: i.wrapperClassName,
						a = e('<div></div>')
							.attr('id', o)
							.addClass(n.wrapperClassName);
					t.wrapAll(a);
					var c = t.parent();
					n.center &&
						c.css({
							width: t.outerWidth(),
							marginLeft: 'auto',
							marginRight: 'auto',
						}),
						'right' === t.css('float') &&
							t
								.css({ float: 'none' })
								.parent()
								.css({ float: 'right' }),
						(n.stickyElement = t),
						(n.stickyWrapper = c),
						(n.currentTop = null),
						s.push(n),
						d.setWrapperHeight(this),
						d.setupChangeListeners(this);
				});
			},
			setWrapperHeight: function (t) {
				var n = e(t),
					i = n.parent();
				i && i.css('height', n.outerHeight());
			},
			setupChangeListeners: function (e) {
				if (window.MutationObserver) {
					var t = new window.MutationObserver(function (t) {
						(t[0].addedNodes.length || t[0].removedNodes.length) &&
							d.setWrapperHeight(e);
					});
					t.observe(e, { subtree: !0, childList: !0 });
				} else
					e.addEventListener(
						'DOMNodeInserted',
						function () {
							d.setWrapperHeight(e);
						},
						!1,
					),
						e.addEventListener(
							'DOMNodeRemoved',
							function () {
								d.setWrapperHeight(e);
							},
							!1,
						);
			},
			update: c,
			unstick: function () {
				return this.each(function () {
					for (
						var t = this, i = e(t), r = -1, o = s.length;
						o-- > 0;

					)
						s[o].stickyElement.get(0) === t &&
							(n.call(s, o, 1), (r = o));
					-1 !== r &&
						(i.unwrap(),
						i.css({
							width: '',
							position: '',
							top: '',
							float: '',
						}));
				});
			},
		};
	window.addEventListener
		? (window.addEventListener('scroll', c, !1),
		  window.addEventListener('resize', p, !1))
		: window.attachEvent &&
		  (window.attachEvent('onscroll', c),
		  window.attachEvent('onresize', p)),
		(e.fn.sticky = function (n) {
			return d[n]
				? d[n].apply(this, t.call(arguments, 1))
				: 'object' != typeof n && n
				? void e.error(
						'Method ' + n + ' does not exist on jQuery.sticky',
				  )
				: d.init.apply(this, arguments);
		}),
		(e.fn.unstick = function (n) {
			return d[n]
				? d[n].apply(this, t.call(arguments, 1))
				: 'object' != typeof n && n
				? void e.error(
						'Method ' + n + ' does not exist on jQuery.sticky',
				  )
				: d.unstick.apply(this, arguments);
		}),
		e(function () {
			setTimeout(c, 0);
		});
});
/* eslint-enable */
